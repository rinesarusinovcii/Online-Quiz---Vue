import user from "@/helpers/user.js";

class QuizService {
    /**
     * Merr të gjitha kuizet nga serveri
     * @returns {Promise<Array>} Lista e kuizeve
     * @throws {Error} Nëse kërkesa dështon
     */
    async getAllQuizzes() {
        try {
            const response = await user.get('quizzes');
            return response.data;
        } catch (error) {
            console.error('Error fetching quizzes:', error);
            throw new Error('Failed to fetch quizzes');
        }
    }

    /**
     * Krijon një kuiz të ri
     * @param {Object} quiz - Të dhënat e kuizit
     * @returns {Promise<Object>} Kuizi i krijuar
     * @throws {Error} Nëse kërkesa dështon
     */
    async createQuiz(quiz) {
        try {
            const response = await user.post('quizzes', quiz);
            if (response.status !== 201) {
                throw new Error(`Unexpected status code: ${response.status}`);
            }
            return response.data;
        } catch (error) {
            console.error('Error creating quiz:', error);
            throw new Error('Failed to create quiz');
        }
    }

    /**
     * Merr një kuiz sipas ID
     * @param {string|number} id - ID e kuizit
     * @returns {Promise<Object>} Kuizi i kërkuar
     * @throws {Error} Nëse kuizi nuk gjendet ose kërkesa dështon
     */
    async getQuizById(id) {
        try {
            const response = await user.get(`quizzes/${id}`);
            if (response.status !== 200) {
                throw new Error(`Quiz not found with status: ${response.status}`);
            }
            return response.data;
        } catch (error) {
            console.error(`Error fetching quiz with id ${id}:`, error);
            throw new Error('Failed to fetch quiz');
        }
    }

    /**
     * Përditëson një kuiz ekzistues
     * @param {string|number} id - ID e kuizit
     * @param {Object} quiz - Të dhënat e përditësuara të kuizit
     * @returns {Promise<Object>} Kuizi i përditësuar
     * @throws {Error} Nëse përditësimi dështon
     */
    async updateQuiz(id, quiz) {
        try {
            const response = await user.put(`quizzes/${id}`, quiz);
            if (response.status !== 200) {
                throw new Error(`Unexpected status code: ${response.status}`);
            }
            return response.data;
        } catch (error) {
            console.error(`Error updating quiz with id ${id}:`, error);
            throw new Error('Failed to update quiz');
        }
    }

    /**
     * Fshin një kuiz
     * @param {string|number} id - ID e kuizit
     * @returns {Promise<boolean>} true nëse fshirja është e suksesshme
     * @throws {Error} Nëse fshirja dështon
     */
    async deleteQuiz(id) {
        try {
            const response = await user.delete(`quizzes/${id}`);
            if (response.status !== 204) {
                throw new Error(`Unexpected status code: ${response.status}`);
            }
            return true;
        } catch (error) {
            console.error(`Error deleting quiz with id ${id}:`, error);
            throw new Error('Failed to delete quiz');
        }
    }
}

export default new QuizService();